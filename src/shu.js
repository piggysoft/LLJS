
// Generated by CoffeeScript 1.3.1
(function() {

  var H, I16H, I32H, U16H, U32H, free, freep, malloc;
  H = I16H = U16H = I32H = U32H = null;

  // type header = struct { [0] ptr :: *header, [4] size :: uint }

  // freep :: *header

  freep = null;

  var S = 1024 * 1024 * 32;
  // malloc :: (uint) -> *any

  malloc = function(nbytes) { // :: (uint)
    var nunits, p, prevp, up;
    // p, up, prevp :: *header
    // nunits :: uint
    nunits = ((nbytes + 8 - 1) / 8 + 1) >>> 0;
    if (!(prevp = freep)) {
      if (!(nunits <= (S / 8))) {
        return null;
      }
      H = new Int8Array(S);
      I16H = new Int16Array(H);
      U16H = new Uint16Array(H);
      I32H = new Int32Array(H);
      U32H = new Uint32Array(H);
      prevp = freep = up = 8;
      U32H[up >> 2] = up;
      U32H[up + 4 >> 2] = (S / 8) - 1;
      prevp = freep;
    }
    p = U32H[prevp >> 2];
    while (true) {
      if (U32H[p + 4 >> 2] >= nunits) {
        if (U32H[p + 4 >> 2] === nunits) {
          U32H[prevp >> 2] = U32H[p >> 2];
        } else {
          U32H[p + 4 >> 2] -= nunits;
          p += U32H[p + 4 >> 2] << 3;
          U32H[p + 4 >> 2] = nunits;
        }
        freep = prevp;
        return p + (1 << 3);
      }
      if (p === freep) {
        return null;
      }
      prevp = p;
      p = U32H[p >> 2];
    }
    return null;
  };

  // free :: (*any) -> any

  free = function(ap) { // :: (*any)
    var bp, p;
    // bp, p :: *header
    bp = (ap) - (1 << 3);
    p = freep;
    while (!(bp > p && bp < U32H[p >> 2])) {
      if (p >= U32H[p >> 2] && (bp > p || bp < U32H[p >> 2])) {
        break;
      }
      p = U32H[p >> 2];
    }
    if (bp + (U32H[bp + 4 >> 2] << 3) === U32H[p >> 2]) {
      U32H[bp + 4 >> 2] += U32H[U32H[p >> 2] + 4 >> 2];
      U32H[bp >> 2] = U32H[U32H[p >> 2] >> 2];
    } else {
      U32H[bp >> 2] = U32H[p >> 2];
    }
    if (p + (U32H[p + 4 >> 2] << 3) === bp) {
      U32H[p + 4 >> 2] += U32H[bp + 4 >> 2];
      U32H[p >> 2] = U32H[bp >> 2];
    } else {
      U32H[p >> 2] = bp;
    }
    freep = p;
  };


function time (fn) {
  var start = new Date();
  fn();
  return new Date() - start;
}

var mTotal = 0, fTotal = 0;


var start = new Date();

var sum = 0;
for (var i = 0; i < 100; i++) {
  var ptrs = [];

  mTotal += time(function () {
    for (var j = 0; j < 100000; j++) {
      ptrs[j] = malloc(4 + 16);
    }
  });

  fTotal += time(function () {
    for (var j = 0; j < 100000; j++) {
      sum += (U32H[ptrs[j] - 8 + 4 >> 2]);
      free(ptrs[j]);
    }
  });
}

print("Malloc: " + mTotal + ", Free: " + fTotal);

print("Done in " + (new Date() - start) + " checksum: " + sum);

}).call(this);
