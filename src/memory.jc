const MB = 1024 * 1024;
const SIZE = 32 * MB;
const STACK_SIZE = 2 * MB;
const HEAP_SIZE = SIZE - STACK_SIZE;

var I4, U4;

/*
   +---------------+ -
 0 | HEAP  POINTER |
 1 | STACK POINTER |
   |               | <- HP
   | HEAP ...      |
   |               |
   +---------------+
   |               |
   | STACK         |
   |               |
   +---------------+ <- SP
*/

function int * memoryCopy(int *dst, int *src, int length) {
  for (var int i = 0; i < length; ++i) {
    *dst++ = *src++;
  }
  return dst;
}


/* K&R Malloc */

struct Header {
  var Header * next;
  var uint size;
}

var Header * base = NULL;
var Header * freep = NULL;

function resetMemory() {
  var M = exports.M = new ArrayBuffer(SIZE);
  exports.U1 = new Uint8Array(M);
  exports.I1 = new Int16Array(M);
  exports.U2 = new Uint16Array(M);
  exports.I2 = new Int16Array(M);
  U4 = exports.U4 = new Uint32Array(M);
  I4 = exports.I4 = new Int32Array(M);
  exports.F4 = new Float32Array(M);
  exports.F8 = new Float64Array(M);

  U4[0] = 4;
  U4[1] = SIZE;

  base = (Header *)2;
  freep = NULL;
}

resetMemory();

function void * sbrk(int nBytes) {
  var int nWords = nBytes / sizeof (u32);
  if (U4[0] + nWords > HEAP_SIZE) {
    trace("Out of Memory");
    return NULL;
  }
  var void * address = (int *)U4[0];
  U4[0] += nWords;
  return address;
}

var uint nUnitsMin = 1024;

function Header * morecore(int nUnits) {
  if (nUnits < nUnitsMin) {
    nUnits = nUnitsMin;
  }
  var void * buffer = sbrk(nUnits * sizeof (Header));

  if (buffer === 0) {
    return NULL;
  }
  var Header * header = (Header *)buffer;
  header->size = nUnits;
  free(header + 1);
  return freep;
}

function void * malloc(int nBytes) {
  var Header *p, *prevp;
  var int nUnits = ((nBytes + sizeof(Header) - 1) / sizeof(Header)) + 1;

  if ((prevp = freep) === NULL) {
    base->next = freep = prevp = base;
    base->size = 0;
  }
  for (p = prevp->next; true; prevp = p, p = p->next) {
    if (p->size >= nUnits) {
      if (p->size === nUnits) {
        prevp->next = p->next;
      } else {
        p->size -= nUnits;
        p += p->size;
        p->size = nUnits;
      }
      freep = prevp;
      return p + 1;
    }
    if (p === freep) {
      if ((p = morecore(nUnits)) == NULL) {
        return NULL;
      }
    }
  }
  return NULL;
}

function void free(void *ap) {
  var Header *bp = (Header *)ap - 1, *p;
  for (p = freep; !(bp > p && bp < p->next); p = p->next) {
    if (p >= p->next && (bp > p || bp < p->next)) {
      break;
    }
  }
  if (bp + bp->size === p->next) {
    bp->size += p->next->size;
    bp->next = p->next->next;
  } else {
    bp->next = p->next;
  }
  if (p + p->size == bp) {
    p->size += bp->size;
    p->next = bp->next;
  } else {
    p->next = bp;
  }
  freep = p;
}

exports.resetMemory = resetMemory;
exports.memoryCopy = memoryCopy;
exports.malloc = malloc;
exports.free = free;
